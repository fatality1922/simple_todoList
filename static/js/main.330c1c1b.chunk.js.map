{"version":3,"sources":["AddTaskForm/AddTaskForm.tsx","TaskListItem/TaskListItem.tsx","TaskList/TaskList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AddTaskForm","addTask","useState","newTask","setNewTask","className","type","value","onChange","e","target","placeholder","Button","variant","style","backgroundColor","color","startIcon","Add","onClick","preventDefault","length","alert","useStyles","makeStyles","theme","createStyles","button","margin","spacing","TaskListItem","task","switchTask","handleDelete","classes","ListItem","alignItems","complete","ListItemIcon","Checkbox","checked","Grid","container","Typography","text","justify","id","TaskList","tasks","List","align","map","tasksInitial","App","setTasks","taskId","setTaskId","completedTasks","filter","console","log","Container","maxWidth","selectedTask","newTasks","deleteId","trim","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.330c1c1b.chunk.js","sourcesContent":["import React, { ChangeEvent, FormEvent, useState } from 'react'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { Add } from '@material-ui/icons';\r\nimport './AddTaskForm.scss';\r\n\r\ninterface AddTaskFormProps {\r\n    addTask: AddTask; // type added in types.d\r\n}\r\nexport const AddTaskForm: React.FC<AddTaskFormProps & { className: string }> = ({ addTask }) => {\r\n\r\n    const [newTask, setNewTask] = useState(\"\");\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTask(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e: FormEvent<HTMLButtonElement>) => {\r\n        e.preventDefault();\r\n        if (newTask.length <= 30) addTask(newTask); //verify if task is not too long\r\n        else { alert(`Max length of task name is 30 characters, your is ${newTask.length}`) };\r\n        setNewTask(\"\"); //set to empty when added\r\n    }\r\n    return (\r\n        <form className=\"taskForm\">\r\n            <input type=\"text\" value={newTask} onChange={handleChange} placeholder=\"what todo?\" />\r\n\r\n            <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                style={{ backgroundColor: '#12824C', color: '#FFFFFF' }}\r\n                startIcon={<Add />}\r\n                onClick={handleSubmit}\r\n            >\r\n                Add\r\n            </Button>\r\n        </form>\r\n    )\r\n}","import { Button, Checkbox, Grid, ListItem, ListItemIcon } from '@material-ui/core';\r\nimport React from 'react'\r\nimport './TaskListItem.scss';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { Typography } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }),\r\n);\r\n\r\n\r\ninterface TaskListItemProps {\r\n  task: task;\r\n  switchTask: switchTask;\r\n  handleDelete: handleDelete;\r\n  addTask: AddTask;\r\n}\r\n\r\nexport const TaskListItem: React.FC<TaskListItemProps> = ({ task, switchTask, handleDelete }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ListItem alignItems=\"center\" className={task.complete ? \"complete\" : \"uncomplete\"}>\r\n\r\n      <ListItemIcon>\r\n        <Checkbox\r\n          color=\"primary\"\r\n          checked={task.complete}\r\n          onChange={() => switchTask(task)}\r\n        />\r\n      </ListItemIcon>\r\n\r\n      <Grid container>\r\n        <Typography className={task.complete ? \"complete\" : \"uncomplete\"}>\r\n          {task.text}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid container justify=\"flex-end\">\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{ backgroundColor: '#de0404', color: '#FFFFFF' }}\r\n          className={classes.button}\r\n          startIcon={<DeleteIcon />}\r\n          onClick={() => handleDelete(task.id)}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </Grid>\r\n\r\n    </ListItem >\r\n  );\r\n}","import { List, Typography } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { AddTaskForm } from '../AddTaskForm/AddTaskForm';\r\nimport { TaskListItem } from '../TaskListItem/TaskListItem';\r\nimport './TaskList.scss';\r\n\r\n\r\ninterface TaskListItemProps {\r\n    tasks: Array<task>;     // type task added in types.d, array of that with generic\r\n    switchTask: switchTask; // types added in types.d\r\n    handleDelete: handleDelete;\r\n    addTask: AddTask;\r\n}\r\nexport const TaskList: React.FC<TaskListItemProps> = ({ tasks, switchTask, handleDelete, addTask }) => {\r\n    return (\r\n        <List className=\"list\">\r\n            <Typography variant=\"h3\" align=\"center\">\r\n                Tasks List\r\n            </Typography>\r\n            <AddTaskForm className=\"taskForm\" addTask={addTask} />\r\n            {tasks.map(task => {\r\n                if (task.complete === false) return <TaskListItem key={task.id} task={task} switchTask={switchTask} handleDelete={handleDelete} addTask={addTask} />\r\n            })}\r\n            {tasks.map(task => {\r\n                if (task.complete === true) return <TaskListItem key={task.id} task={task} switchTask={switchTask} handleDelete={handleDelete} addTask={addTask} />\r\n            })}\r\n        </List>\r\n    );\r\n}","import { Container } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { TaskList } from './TaskList/TaskList';\n\n\nconst tasksInitial: Array<task> = [ //mock\n  { id: 0, text: \"Make delicious pasta\", complete: true },\n  { id: 1, text: \"Do whole job\", complete: false },\n];\n\nconst App: React.FC = () => {\n  const [tasks, setTasks] = useState(tasksInitial);\n  const [taskId, setTaskId] = useState(tasksInitial.length);\n\n  const switchTask: switchTask = selectedTask => { //switchTask type defined in types.d\n    const newTasks = tasks.map(task => { //creating new const with changed status of complete\n      if (task === selectedTask) return { ...task, complete: !task.complete }  //change the status of task\n      return task;\n    });\n    setTasks(newTasks); //set new status using newTasks const\n  }\n\n  const handleDelete: handleDelete = (deleteId) => {\n    const newTasks = tasks.filter(task => {\n      return task.id !== deleteId;\n    })\n    setTasks(newTasks);\n  }\n\n  const completedTasks = tasks.filter(task => { //filter all tasks by status of complete\n    if (task.complete === true) return task;\n    return null;\n  });\n  console.log(completedTasks); //show completed tasks //why does it works\n\n\n  const addTask: AddTask = newTask => { //string, not object just because complete is added \"rigidly\"\n    newTask.trim() !== \"\" &&\n      setTasks([...tasks, { id: taskId, text: newTask, complete: false }]);\n    setTaskId(taskId + 1);\n  }\n\n  return (\n    <Container maxWidth=\"sm\" className=\"container\">\n      <TaskList tasks={tasks} switchTask={switchTask} handleDelete={handleDelete} addTask={addTask} />\n    </Container>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}